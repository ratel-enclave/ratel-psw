############################################################################
# Copyright 2016 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
############################################################################
Import('*')

env.PartVersion("9.0.1")
env.PartName("ippcpepid")
env.DependsOn([
    Component('ippcommon'),
    Component('ippcp'),
])

IPP_LIBNAME = '${PART_SHORT_NAME}'

env.ExportCPPPATH([AbsDir('sources/ippcp/src/')])  #ippcpepid needs this

#includes to install
install_headers = Pattern(src_dir='include/',
                          includes=[
                              'ippcpepid.h',
                          ],
                          excludes=[],
                          recursive=True)
# common headers, for SdkInclude
common_headers = Pattern(src_dir='include/',
                         includes=['ippdefs.h',
                                   'ippversion.h',
                                   'ippcore.h',
                                   'ippbase.h',
                                   'ipptypes.h'],
                         excludes=[],
                         recursive=True)
#files
ippcp_files = Pattern(src_dir='sources/ippcpepid/src/',
                      includes=[
                          'pcp*.c',
                      ],
                      excludes=['pcpepidmain.c'],
                      recursive=True)
#Symbols defined in following files are used by ippcpepid library
ippcp_intern_files = Pattern(src_dir='sources/ippcp/src/',
                             includes=[
                                 'pcpmontexpbinca.c',
                                 'pcpmontred.c',
                                 'pcpbnuarith.c',
                                 'pcpbnu32misc.c',
                                 'pcpbnu32arith.c',
                                 'pcpbnumisc.c',
                             ],
                             recursive=True)

ippdir = ''
#internal ipp includes src/primitives/ipp/
env.Append(CPPPATH=[AbsDir('include/')])
env.Append(CPPPATH=[AbsDir('sources/ippcp/src/')])
env.Append(CPPPATH=[AbsDir('sources/ippcpepid/src/')])
#ipp defines
env.Append(CPPDEFINES='_IPP_v50_') #required for all ippcp

env.Append(CPPDEFINES='_IPP_DEBUG')  #enable function sanity checking

if 'install_package' in env['MODE']:
    # All files at /ext/ipp/source/include
    env.InstallTopLevel(install_headers, sub_dir='ext/ipp/include')
    src_files = Pattern(src_dir='sources/ippcpepid/src/',
                        includes=['*'],
                        excludes=['pcpepidmain.c'],
                        recursive=True)
    env.InstallTopLevel(src_files, sub_dir='ext/ipp/sources/ippcpepid/src')
    this_file = Pattern(src_dir='.',
                        includes=['ippcpepid.parts'],
                        excludes=[],
                        recursive=True)
    env.InstallTopLevel(this_file, sub_dir='ext/ipp/')
    makefile = Pattern(src_dir='./sources/ippcpepid',
                        includes=['Makefile'],
                        excludes=[],
                        recursive=True)
    env.InstallTopLevel(makefile, sub_dir='ext/ipp/sources/ippcpepid')

else:

    all_c_files = ippcp_files.files()
    if 'use_commercial_ipp' in env['MODE']:
        all_c_files = all_c_files + ippcp_intern_files.files()

    outputs = env.Library(IPP_LIBNAME, all_c_files)

    env.SdkLib(outputs)
    env.SdkInclude(install_headers)
    env.SdkInclude(common_headers)
    if 'install_lib' in env['MODE']:
        env.InstallLib(outputs)
